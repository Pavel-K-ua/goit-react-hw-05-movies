{"version":3,"file":"static/js/633.32e1b006.chunk.js","mappings":"2MAmBWA,EAAS,WAAH,IAAIC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,E,qDCqBFG,EAAgBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qEAMhC,EApDqB,WAAO,IAADC,EACjBR,GAAOS,EAAAA,EAAAA,MAAPT,GAEAU,GAASC,EAAAA,EAAAA,GAAQC,EAAAA,GAAiBZ,GAAlCU,KACAG,EAAgEH,EAAhEG,eAAgBC,EAAgDJ,EAAhDI,SAAUC,EAAsCL,EAAtCK,YAAaC,EAAyBN,EAAzBM,aAAcC,EAAWP,EAAXO,OACvDC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,SAAqB,QAAdb,EAAAU,EAASI,aAAK,IAAAd,OAAA,EAAdA,EAAgBe,OAAQ,KAEjD,OACEC,EAAAA,EAAAA,MAACpB,EAAa,CAACqB,MAAO,CAAEC,QAAS,UAAWC,SAAA,EAC1CC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAIV,EAAUW,QAAQJ,SAAC,aAC7BH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEI,MAAO,IACPC,IAAG,kCAAAC,OAAoCnB,GACvCoB,IAAKtB,KAEPW,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CACGd,EAAe,IAAC,IAAAqB,OAAiB,OAAZlB,QAAY,IAAZA,OAAY,EAAZA,EAAcoB,MAAM,EAAG,GAAE,SAEjDR,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIb,KACJc,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SACS,OAANV,QAAM,IAANA,OAAM,EAANA,EAAQoB,KAAI,SAAAC,GAAK,OAChBV,EAAAA,EAAAA,KAAA,QAAAD,SAAA,IAAAO,OAAWI,EAAMC,KAAI,MAAW,KAF5BhD,MAKRqC,EAAAA,EAAAA,KAAA,UACAJ,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,OAAMH,SAAC,YAElBC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,UAASH,SAAC,kBAGvBC,EAAAA,EAAAA,KAAA,aAEFA,EAAAA,EAAAA,KAACY,EAAAA,SAAQ,CAACC,UAAUb,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eAAgBA,UACtCC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,QAIf,C","sources":["../node_modules/nanoid/index.browser.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useHttp } from 'hooks/useHttp';\nimport { nanoid } from 'nanoid';\nimport React, { Suspense, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport { styled } from 'styled-components';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n\n  const { data } = useHttp(getMovieDetails, id);\n  const { original_title, overview, poster_path, release_date, genres } = data;\n  const location = useLocation();\n  const goBackRef = useRef(location.state?.from || '/');\n\n  return (\n    <StyledWrapper style={{ padding: '0 20px' }}>\n      <Link to={goBackRef.current}>Go back</Link>\n      <div>\n        <img\n          width={280}\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={original_title}\n        />\n        <h2>\n          {original_title} {`(${release_date?.slice(0, 4)})`}\n        </h2>\n        <h2>Overview:</h2>\n        <p>{overview}</p>\n        <h2>Genres:</h2>\n        <p key={nanoid()}>\n          {genres?.map(genre => (\n            <span>{` ${genre.name} `}</span>\n          ))}\n        </p>\n        <hr />\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <hr />\n      </div>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <Outlet />\n      </Suspense>\n    </StyledWrapper>\n  );\n};\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport default MovieDetails;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","StyledWrapper","styled","_templateObject","_taggedTemplateLiteral","_location$state","useParams","data","useHttp","getMovieDetails","original_title","overview","poster_path","release_date","genres","location","useLocation","goBackRef","useRef","state","from","_jsxs","style","padding","children","_jsx","Link","to","current","width","src","concat","alt","slice","map","genre","name","Suspense","fallback","Outlet"],"sourceRoot":""}